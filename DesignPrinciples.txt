=================
Design Principles
=================

* Separate what vary from what stays the same.
* Program to interface, not an implementation.
* Favor composition over inheritance.
* Strive for loosely coupled designs between objects than interact (you know only what interface implements...).
* Classes should be open for extension but closed for modification.

DECORATOR
=========
Attach additional responsabilities to an object dinamically. Provide a flexible alternative to subclassing for extending functionality.

FACTORY METHOD
==============
Defines an interface for creating an object but let's subclasses decide which class to instantiate.

DEPENDENCY INVERSION PRINCIPLE
==============================
Depend upon abstractions. Do not depend upon concrete classes.

ABSTRACT FACTORY PATTERN
============================
Provides an interface for creating families of related or dependent objects without specifying their concrete classes.

SINGLETON
=========
Ensure a class has only an instance and provides a global point to access it. 
But.... Why Singletons are evil? https://blogs.msdn.microsoft.com/scottdensmore/2004/05/25/why-singletons-are-evil/

1)       Singletons frequently are used to provide a global access point for some service.
True, they do this, but at what cost? They provide a well-known point of access to some service in your application so that you don’t have to pass around a reference to that service. How is that different from a global variable? (remember, globals are bad, right???) What ends up happening is that the dependencies in your design are hidden inside the code, and not visible by examining the interfaces of your classes and methods. You have to inspect the code to understand exactly what other objects your class uses. This is less clear than it could be. The urge to create something as a global to avoid passing it around is a smell in your design; it is not a feature of globals/singletons. If you examine your design more closely, you can almost always come up with a design that it is better and does not have to pass around tramp data to every object and method.

2)       Singletons allow you to limit creation of your objects.
This is true, but now you are mixing two different responsibilities into the same class, which is a violation of the Single Responsibility Principle. A class should not care whether or not it is a singleton. It should be concerned with its business responsibilities only. If you want to limit the ability to instantiate some class, create a factory or builder object that encapsulates creation, and in there, limit creation as you wish. Now the responsibilities of creation are partitioned away from the responsibilities of the business entity.

3)       Singletons promote tight coupling between classes
One of the underlying properties that makes code testable is that it is loosely coupled to its surroundings. This property allows you to substitute alternate implementations for collaborators during testing to achieve specific testing goals (think mock objects). Singletons tightly couple you to the exact type of the singleton object, removing the opportunity to use polymorphism to substitute an alternative. A better alternative, as discussed in the first point above, is to alter your design to allow you to pass references to objects to your classes and methods, which will reduce the coupling issues described above.

4)       Singletons carry state with them that last as long as the program lasts
Persistent state is the enemy of unit testing. One of the things that makes unit testing effective is that each test has to be independent of all the others. If this is not true, then the order in which the tests run affects the outcome of the tests. This can lead to cases where tests fail when they shouldn’t, and even worse, it can lead to tests that pass just because of the order in which they were run. This can hide bugs and is evil. Avoiding static variables is a good way to prevent state from being carried from test to test. Singletons, by their very nature, depend on an instance that is held in a static variable. This is an invitation for test-dependence. Avoid this by passing references to objects to your classes and methods.
